{"name": "test_delete_contact_from_group", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: [name=\"remove\"]", "trace": "app = <fixture.Application.Application object at 0x000002905F3B7D00>, dbORM = <fixture.orm.ORMFixture object at 0x000002905F3BA610>\n\n    def test_delete_contact_from_group(app, dbORM):\n        with allure.step(\"Given a non-empty list of groups with contact\"):\n            if len(dbORM.get_contact_list()) == 0:\n                app.contact.add_new_contact(\n                    Contact(firstname=\"Testik\", middlename=\"Midtest\", lastname=\"Lasttest\", nickname=\"Nickname test\",\n                            title=\"Mrs\", company=\"Test Company\", street=\"5th Avenue\", homephone=\"15\",\n                            mobilephone=\"111999333\", workphone=\"12123342\", fax=\"2345645\", email=\"test@test.com\",\n                            birthday_day=\"11\", birthday_month=\"July\", birthday_year=\"1991\", anniversary_day=\"8\",\n                            anniversary_month=\"November\", anniversary_year=\"1991\", address2=\"Sec address\", phone2=\"163434\",\n                            note=\"testtesttest note\"))\n            if len(dbORM.get_group_list()) == 0:\n                app.group.create(Group(gr_name=\"Test group\", gr_header=\"test header\", gr_footer=\"test footer\"))\n            if len(dbORM.get_groups_with_contacts()) == 0:\n                group = random.choice(dbORM.get_group_list())\n                contact = random.choice(dbORM.get_contact_list())\n                app.contact.add_contact_to_group(contact.id, group)\n            groups_with_contacts = dbORM.get_groups_with_contacts()\n        with allure.step(\"Given a group with added contacts\"):\n            group = random.choice(groups_with_contacts)\n        with allure.step(\"Given a list of contacts in %s group\" % group):\n            contacts_in_group = dbORM.get_contacts_in_groups(group)\n        with allure.step(\"Given contact from %s group\" % group):\n            contact = random.choice(contacts_in_group)\n        with allure.step(\"When I delete contact %s from the %s group\" % (contact, group)):\n>           app.contact.delete_contact_from_group(contact.id, group)\n\ntest\\test_delete_contact_from_group.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture\\contact.py:333: in delete_contact_from_group\n    wd.find_element_by_name(\"remove\")\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:496: in find_element_by_name\n    return self.find_element(by=By.NAME, value=name)\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002905F3BADF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: [name=\\\\\"remove\\\\\"]...ntent/shared/webdriver/Errors.jsm:393:5\\\\nelement.find/</<@chrome://remote/content/marionette/element.js:305:16\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: [name=\"remove\"]\n\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException"}, "steps": [{"name": "Given a non-empty list of groups with contact", "status": "passed", "start": 1629144443508, "stop": 1629144443517}, {"name": "Given a group with added contacts", "status": "passed", "start": 1629144443517, "stop": 1629144443517}, {"name": "Given a list of contacts in 141:None:None:None group", "status": "passed", "start": 1629144443517, "stop": 1629144443520}, {"name": "Given contact from 141:None:None:None group", "status": "passed", "start": 1629144443520, "stop": 1629144443520}, {"name": "When I delete contact 149:Test edit:Lasttest edit:Midtest edit:5th Avenue edit:15 edit:111999333444:testedit@test.com:Sec address edit:163434444 from the 141:None:None:None group", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: [name=\"remove\"]\n\n", "trace": "  File \"C:\\Users\\annpa\\PycharmProjects\\python_training_new\\test\\test_delete_contact_from_group.py\", line 30, in test_delete_contact_from_group\n    app.contact.delete_contact_from_group(contact.id, group)\n  File \"C:\\Users\\annpa\\PycharmProjects\\python_training_new\\fixture\\contact.py\", line 333, in delete_contact_from_group\n    wd.find_element_by_name(\"remove\")\n  File \"c:\\users\\annpa\\pycharmprojects\\python_training_new\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 496, in find_element_by_name\n    return self.find_element(by=By.NAME, value=name)\n  File \"c:\\users\\annpa\\pycharmprojects\\python_training_new\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 976, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n  File \"c:\\users\\annpa\\pycharmprojects\\python_training_new\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\annpa\\pycharmprojects\\python_training_new\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1629144443520, "stop": 1629144449152}], "start": 1629144443508, "stop": 1629144449174, "uuid": "15e3821f-704d-4d70-9391-21b51510c8d6", "historyId": "dbe4bf731f096ead8203bf111dd34c8a", "testCaseId": "d5bb8fb2593a3ef2faca1b6c894f4dd7", "fullName": "test.test_delete_contact_from_group#test_delete_contact_from_group", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_delete_contact_from_group"}, {"name": "host", "value": "DESKTOP-NSHF797"}, {"name": "thread", "value": "8900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_delete_contact_from_group"}]}